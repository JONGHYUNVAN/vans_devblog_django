"""
Django settings for vans_search_service project.

Generated by 'django-admin startproject' using Django 5.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
from pathlib import Path

from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv(
    "SECRET_KEY",
    "django-development-ASJDFHKJLASHDKFLJHJASDHFKLJHASDKLJFHLAJSDFHLKAJHSDFLK",
)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DEBUG", "True").lower() == "true"

ALLOWED_HOSTS = ["localhost", "127.0.0.1"]


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # Third party apps
    "rest_framework",
    "corsheaders",
    "drf_yasg",
    "django_elasticsearch_dsl",
    # Local apps
    "search",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "vans_search_service.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "vans_search_service.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    },
    # MariaDB connection for search logs (기존 User Service DB)
    "search_logs": {
        "ENGINE": "django.db.backends.mysql",
        "NAME": os.getenv("MARIADB_DATABASE", "vans_user_db"),
        "USER": os.getenv("MARIADB_USER", "vans_user"),
        "PASSWORD": os.getenv("MARIADB_PASSWORD", "password"),
        "HOST": os.getenv("MARIADB_HOST", "localhost"),
        "PORT": os.getenv("MARIADB_PORT", "3306"),
        "OPTIONS": {
            "charset": "utf8mb4",
            "init_command": "SET sql_mode='STRICT_TRANS_TABLES'",
        },
    },
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "ko-kr"

TIME_ZONE = "Asia/Seoul"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# =============================================================================
# REST FRAMEWORK SETTINGS
# =============================================================================

REST_FRAMEWORK = {
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.AllowAny",
    ],
    "DEFAULT_RENDERER_CLASSES": [
        "rest_framework.renderers.JSONRenderer",
        "rest_framework.renderers.BrowsableAPIRenderer",
    ],
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 20,
    "DEFAULT_FILTER_BACKENDS": [
        "rest_framework.filters.SearchFilter",
        "rest_framework.filters.OrderingFilter",
    ],
}


# =============================================================================
# CORS SETTINGS
# =============================================================================

CORS_ALLOW_ALL_ORIGINS = True  # Development only
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",  # Next.js frontend
    "http://127.0.0.1:3000",
]


# =============================================================================
# SWAGGER SETTINGS
# =============================================================================

SWAGGER_SETTINGS = {
    "SECURITY_DEFINITIONS": {
        "Bearer": {"type": "apiKey", "name": "Authorization", "in": "header"}
    },
    "USE_SESSION_AUTH": False,
    "JSON_EDITOR": True,
    "SUPPORTED_SUBMIT_METHODS": ["get", "post", "put", "delete", "patch"],
    "OPERATIONS_SORTER": "alpha",
    "TAGS_SORTER": "alpha",
    "DOC_EXPANSION": "none",
    "DEEP_LINKING": True,
    "SHOW_EXTENSIONS": True,
    "DEFAULT_MODEL_RENDERING": "model",
}


# =============================================================================
# ELASTICSEARCH SETTINGS
# =============================================================================

# Elasticsearch 설정 추가 함수
def get_env_variable(var_name, default_value=None):
    """환경변수 값을 가져옵니다."""
    return os.getenv(var_name, default_value)

# CloudType Elasticsearch 설정
ELASTICSEARCH_HOST = get_env_variable("ELASTICSEARCH_HOST")
ELASTICSEARCH_USERNAME = get_env_variable("ELASTICSEARCH_USERNAME")
ELASTICSEARCH_PASSWORD = get_env_variable("ELASTICSEARCH_PASSWORD")

# 시작 시 환경변수 및 연결 상태 로깅
import logging
logger = logging.getLogger(__name__)

print(f"🔧 Django 설정 로딩 중...")
print(f"📍 ELASTICSEARCH_HOST: {ELASTICSEARCH_HOST}")
print(f"👤 ELASTICSEARCH_USERNAME: {ELASTICSEARCH_USERNAME}")
print(f"🔐 ELASTICSEARCH_PASSWORD: {'***' if ELASTICSEARCH_PASSWORD else 'None'}")

if not ELASTICSEARCH_HOST:
    print("❌ ELASTICSEARCH_HOST 환경변수가 설정되지 않았습니다!")
if not ELASTICSEARCH_USERNAME:
    print("❌ ELASTICSEARCH_USERNAME 환경변수가 설정되지 않았습니다!")
if not ELASTICSEARCH_PASSWORD:
    print("❌ ELASTICSEARCH_PASSWORD 환경변수가 설정되지 않았습니다!")

# CloudType Elasticsearch 전용 설정
es_config = {
    "hosts": [f"https://{ELASTICSEARCH_HOST}"],
    "timeout": 30,
    "verify_certs": False,  # 개발환경에서는 SSL 인증서 검증 비활성화
    "http_auth": (ELASTICSEARCH_USERNAME, ELASTICSEARCH_PASSWORD),
}

ELASTICSEARCH_DSL = {
    "default": es_config,
}

print(f"⚙️  Elasticsearch 설정: https://{ELASTICSEARCH_HOST}")
print(f"🔗 연결 테스트는 Django 시작 후 수행됩니다.")


# =============================================================================
# CACHING SETTINGS (비용 효율적인 Django 내장 캐시)
# =============================================================================

CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.locmem.LocMemCache",
        "LOCATION": "search-cache",
        "TIMEOUT": 300,  # 5분
        "OPTIONS": {
            "MAX_ENTRIES": 1000,
        },
    }
}

# Search cache timeouts
SEARCH_CACHE_TIMEOUT = 300  # 5분
AUTOCOMPLETE_CACHE_TIMEOUT = 600  # 10분
POPULAR_SEARCHES_CACHE_TIMEOUT = 3600  # 1시간


# =============================================================================
# MONGODB SETTINGS (기존 Post Service DB)
# =============================================================================

MONGODB_SETTINGS = {
    "host": os.getenv("MONGODB_HOST", "localhost"),
    "port": int(os.getenv("MONGODB_PORT", 27017)),
    "database": os.getenv("MONGODB_DATABASE", "vans_post_db"),
    "username": os.getenv("MONGODB_USER", "vans_user"),
    "password": os.getenv("MONGODB_PASSWORD", "password"),
}


# =============================================================================
# MONGODB SETTINGS
# =============================================================================

# MongoDB 환경변수 로깅
MONGODB_HOST = os.getenv("MONGODB_HOST", "localhost")
MONGODB_PORT = int(os.getenv("MONGODB_PORT", 27017))
MONGODB_DATABASE = os.getenv("MONGODB_DATABASE", "devblog")
MONGODB_USERNAME = os.getenv("MONGODB_USERNAME")
MONGODB_PASSWORD = os.getenv("MONGODB_PASSWORD")

print(f"🍃 MongoDB 설정:")
print(f"📍 MONGODB_HOST: {MONGODB_HOST}")
print(f"🔢 MONGODB_PORT: {MONGODB_PORT}")
print(f"🗄️  MONGODB_DATABASE: {MONGODB_DATABASE}")
print(f"👤 MONGODB_USERNAME: {MONGODB_USERNAME}")
print(f"🔐 MONGODB_PASSWORD: {'***' if MONGODB_PASSWORD else 'None'}")

if not MONGODB_USERNAME:
    print("❌ MONGODB_USERNAME 환경변수가 설정되지 않았습니다!")
if not MONGODB_PASSWORD:
    print("❌ MONGODB_PASSWORD 환경변수가 설정되지 않았습니다!")

MONGODB_SETTINGS = {
    "host": MONGODB_HOST,
    "port": MONGODB_PORT,
    "database": MONGODB_DATABASE,
    "username": MONGODB_USERNAME,
    "password": MONGODB_PASSWORD,
    "auth_source": os.getenv("MONGODB_AUTH_SOURCE", "admin"),
    "direct_connection": os.getenv("MONGODB_DIRECT_CONNECTION", "true").lower()
    == "true",
}

# =============================================================================
# LOGGING SETTINGS
# =============================================================================

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {module} {process:d} {thread:d} {message}",
            "style": "{",
        },
        "simple": {
            "format": "{levelname} {message}",
            "style": "{",
        },
    },
    "handlers": {
        "file": {
            "level": "INFO",
            "class": "logging.FileHandler",
            "filename": BASE_DIR / "logs" / "search.log",
            "formatter": "verbose",
        },
        "console": {
            "level": "INFO",
            "class": "logging.StreamHandler",
            "formatter": "simple",
        },
    },
    "loggers": {
        "search": {
            "handlers": ["file", "console"],
            "level": "INFO",
            "propagate": True,
        },
        "elasticsearch": {
            "handlers": ["file", "console"],
            "level": "WARNING",
            "propagate": True,
        },
    },
}
